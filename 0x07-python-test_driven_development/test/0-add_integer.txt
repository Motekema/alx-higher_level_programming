The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
	 >>> module_description = __import__("0-add_integer").__doc__
	 >>> len(module_description) > 1
	 True

Checking for function docstring:
	 >>> function_description = __import__("0-add_integer").add_integer.__doc__
         >>> len(function_description) > 1
         True

Checking regular addition:
	 >>> result = add_integer(2, 3)
	 >>> result == 5
	 True

Checking positive with negative:
	 >>> result = add_integer(2, -4)
	 >>> result == -2
	 True

Checking negative with positive:
	 >>> result = add_integer(-6, 8)
	 >>> result == 2
	 True

Checking addition over multiple values:
	 >>> results = [add_integer(i, i ** 2) for i in range(6)]
	 >>> expected_results = [0, 2, 6, 12, 20, 30]
	 >>> results == expected_results
	 True

Checking float with int:
	 >>> result = add_integer(2.1, 4)
	 >>> result == 6
	 True

Checking int with float:
	 >>> result = add_integer(5, 7.8)
	 >>> result == 12
	 True

Checking both float:
	 >>> result = add_integer(2.45, 3.1)
	 >>> result == 5
	 True

Checking for passed NaN:
	 >>> try:
	 ...     result = add_integer(1, float('nan'))
	 ... except ValueError as e:
	 ...     str(e) == "cannot convert float NaN to integer"
	 True

Checking for passed inf:
	 >>> try:
	 ...     result = add_integer(1, float('inf'))
	 ... except OverflowError as e:
	 ...     str(e) == "cannot convert float infinity to integer"
	 True

Checking super long int:
	 >>> result = add_integer(999999999999999999999999999999, 1)
	 >>> result == 1000000000000000000000000000000
	 True

Checking non-number with number:
	 >>> try:
	 ...     result = add_integer([1], 2)
	 ... except TypeError as e:
	 ...     str(e) == "a must be an integer"
	 True

Checking number with non-number:
	 >>> try:
	 ...     result = add_integer(3, "2")
	 ... except TypeError as e:
	 ...     str(e) == "b must be an integer"
	 True

Checking non-number with non-number:
	 >>> try:
	 ...     result = add_integer((2,), {"key": "value"})
	 ... except TypeError as e:
	 ...     str(e) == "a must be an integer"
	 True

Checking bool with number:
	 >>> try:
	 ...     result = add_integer(True, 1)
	 ... except TypeError as e:
	 ...     str(e) == "a must be an integer"
	 True

Checking number with bool:
	 >>> try:
	 ...     result = add_integer(0, False)
	 ... except TypeError as e:
	 ...     str(e) == "b must be an integer"
	 True

Checking no args:
	 >>> try:
	 ...     result = add_integer()
	 ... except TypeError as e:
	 ...     str(e) == "add_integer() missing 2 required positional arguments: 'a' and 'b'"
	 True

Checking one arg:
	 >>> try:
	 ...     result = add_integer(1)
	 ... except TypeError as e:
	 ...     str(e) == "add_integer() missing 1 required positional argument: 'b'"
	 True

Checking more than 2 args:
	 >>> try:
	 ...     result = add_integer(1, 2, 3)
	 ... except TypeError as e:
	 ...     str(e) == "add_integer() takes 2 positional arguments but 3 were given"
	 True

