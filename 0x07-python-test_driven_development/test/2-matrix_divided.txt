The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

Importing the function from the module:
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Checking for module docstring:
	 >>> module_description = __import__("2-matrix_divided").__doc__
	 >>> len(module_description) > 1
	 True

Checking for function docstring:
	 >>> function_description = __import__("2-matrix_divided").matrix_divided.__doc__
         >>> len(function_description) > 1
         True

Checking for passing None as matrix:
	 >>> try:
	 ...     matrix_divided(None, 1)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for passing None as div:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> try:
	 ...     matrix_divided(matrix, None)
	 ... except TypeError as e:
	 ...     str(e) == "div must be a number"
	 True

Checking for matrix as list:
	 >>> matrix = "Hello"
	 >>> try:
	 ...     matrix_divided(matrix, 1)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for list of mixed list and non-list items:
	 >>> matrix = [[1, 2, 3], "Hello"]
	 >>> try:
	 ...     matrix_divided(matrix, 1)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for uneven matrix:
	 >>> matrix = [[1, 2, 3], [4, 5, 6, 7]]
	 >>> try:
	 ...     matrix_divided(matrix, 3)
	 ... except TypeError as e:
	 ...     str(e) == "Each row of the matrix must have the same size"
	 True

Checking for mix of ints, floats, and non-number type:
         >>> matrix = [[1, "H", 3], [4.1, 5, 6.8]]
         >>> try:
	 ...     matrix_divided(matrix, 11)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for mix of ints, floats, and bool:
	 >>> matrix = [[1, True, 3], [False, 5, 6.8]]
         >>> try:
	 ...     matrix_divided(matrix, 11)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for mix of ints, floats, and tuple:
         >>> matrix = [[1, (1,), 3], [4, 5, 6.8]]
         >>> try:
	 ...     matrix_divided(matrix, 11)
	 ... except TypeError as e:
	 ...     str(e) == "matrix must be a matrix (list of lists) of integers/floats"
	 True

Checking for div as non-number:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> try:
	 ...     matrix_divided(matrix, "A")
	 ... except TypeError as e:
	 ...     str(e) == "div must be a number"
	 True

Checking for div as bool:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
         >>> try:
	 ...     matrix_divided(matrix, True)
	 ... except TypeError as e:
	 ...     str(e) == "div must be a number"
	 True

Checking for division by zero:
	 >>> try:
	 ...     matrix_divided(matrix, 0)
	 ... except ZeroDivisionError as e:
	 ...     str(e) == "division by zero"
	 True

Checking for regular division:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> result = matrix_divided(matrix, 3)
	 >>> expected_result = [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	 >>> result == expected_result
	 True
	 >>> matrix
	 [[1, 2, 3], [4, 5, 6]]

Checking for mix of ints and floats:
	 >>> matrix = [[1, 2.4, 3], [4.1, 5, 6.8]]
	 >>> result = matrix_divided(matrix, 11)
	 >>> expected_result = [[0.09, 0.22, 0.27], [0.37, 0.45, 0.62]]
	 >>> result == expected_result
	 True
	 >>> matrix
	 [[1, 2.4, 3], [4.1, 5, 6.8]]

Checking for div as float:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> result = matrix_divided(matrix, 4.5)
	 >>> expected_result = [[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]
	 >>> result == expected_result
	 True
	 >>> matrix
	 [[1, 2, 3], [4, 5, 6]]

Checking for negative numerators:
	 >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
	 >>> result = matrix_divided(matrix, 3)
	 >>> expected_result = [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
	 >>> result == expected_result
	 True
         >>> matrix
         [[-1, -2, -3], [-4, -5, -6]]

Checking for div as negative:
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
         >>> result = matrix_divided(matrix, -3)
         >>> expected_result = [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
         >>> result == expected_result
         True
         >>> matrix
         [[1, 2, 3], [4, 5, 6]]

Checking for empty matrix:
	 >>> matrix = []
	 >>> result = matrix_divided(matrix, 1)
	 >>> expected_result = []
	 >>> result == expected_result
	 True
	 >>> matrix
	 []

Checking for 1xn matrix:
	 >>> matrix = [[1, 2, 3]]
	 >>> result = matrix_divided(matrix, 2)
	 >>> expected_result = [[0.5, 1.0, 1.5]]
	 >>> result == expected_result
	 True
	 >>> matrix
	 [[1, 2, 3]]

Checking for nx1 matrix:
	 >>> matrix = [[1], [2], [3]]
	 >>> result = matrix_divided(matrix, 2)
	 >>> expected_result = [[0.5], [1.0], [1.5]]
	 >>> result == expected_result
	 True
	 >>> matrix
	 [[1], [2], [3]]

Checking for division by infinity:
	 >>> result = matrix_divided(matrix, float('inf'))
	 >>> expected_result = [[0.0], [0.0], [0.0]]
	 >>> result == expected_result
	 True

Checking for division with infinity in numerator:
	 >>> matrix = [[1, float('inf'), 3], [4, 5, 6]]
	 >>> result = matrix_divided(matrix, 1)
         >>> expected_result = [[1.0, inf, 3.0], [4.0, 5.0, 6.0]]
         >>> result == expected_result
         True

Checking for division with infinity in numerator and denominator:
	 >>> result = matrix_divided(matrix, float('inf'))
	 >>> expected_result = [[0.0, nan, 0.0], [0.0, 0.0, 0.0]]
	 >>> result == expected_result
	 True

Checking for no args:
	 >>> try:
	 ...     matrix_divided()
	 ... except TypeError as e:
	 ...     str(e) == "matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'"
	 True

Checking for 1 arg:
	 >>> try:
	 ...     matrix_divided(matrix)
	 ... except TypeError as e:
	 ...     str(e) == "matrix_divided() missing 1 required positional argument: 'div'"
	 True

Checking for more than 2 args:
	 >>> try:
	 ...     matrix_divided(matrix, 1, 3)
	 ... except TypeError as e:
	 ...     str(e) == "matrix_divided() takes 2 positional arguments but 3 were given"
	 True

