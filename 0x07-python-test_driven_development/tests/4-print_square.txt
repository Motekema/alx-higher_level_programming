The ``4-print_square`` module
======================

Using ``print_square``
-------------------

Importing the function from the module:
	>>> print_square = __import__("4-print_square").print_square

Checking for module docstring:
	 >>> module_description = __import__("4-print_square").__doc__
	 >>> len(module_description) > 1
	 True

Checking for function docstring:
	 >>> function_description = __import__("4-print_square").print_square.__doc__
         >>> len(function_description) > 1
         True

Checking for no args:
	 >>> try:
	 ...     print_square()
	 ... except TypeError as e:
	 ...     str(e) == "print_square() missing 1 required positional argument: 'size'"
	 True

Checking for too many args:
	 >>> try:
	 ...     print_square(1, 2)
	 ... except TypeError as e:
	 ...     str(e) == "print_square() takes 1 positional argument but 2 were given"
	 True

Checking for passing None:
	 >>> try:
	 ...     print_square(None)
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

Checking for positive ints:
	 >>> result = print_square(4)
	 >>> expected_result = "####\n####\n####\n####"
	 >>> result == expected_result
	 True

	 >>> result = print_square(10)
	 >>> expected_result = "##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########"
	 >>> result == expected_result
	 True

	 >>> result = print_square(0)
	 >>> expected_result = ""
	 >>> result == expected_result
	 True

	 >>> result = print_square(1)
	 >>> expected_result = "#"
	 >>> result == expected_result
	 True

Checking for negative ints:
	 >>> try:
	 ...     print_square(-1)
	 ... except ValueError as e:
	 ...     str(e) == "size must be >= 0"
	 True

Checking for non-number types:
	 >>> try:
	 ...     print_square((1,))
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

	 >>> try:
	 ...     print_square("3")
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

	 >>> try:
	 ...     print_square(True)
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

Checking for non-int number types:
	 >>> try:
	 ...     print_square(1.0)
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

	 >>> try:
	 ...     print_square(-5.5)
	 ... except TypeError as e:
	 ...     str(e) == "size must be an integer"
	 True

