The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

Importing the function from the module:
	>>> say_my_name = __import__("3-say_my_name").say_my_name

Checking for module docstring:
	 >>> module_description = __import__("3-say_my_name").__doc__
	 >>> len(module_description) > 1
	 True

Checking for function docstring:
	 >>> function_description = __import__("3-say_my_name").say_my_name.__doc__
         >>> len(function_description) > 1
         True

Checking for passing None as first name:
	 >>> try:
	 ...     say_my_name(None, "Hello")
	 ... except TypeError as e:
	 ...     str(e) == "first_name must be a string"
	 True

Checking for passing None as last name:
	 >>> try:
	 ...     say_my_name("Hello", None)
	 ... except TypeError as e:
	 ...     str(e) == "last_name must be a string"
	 True

Checking for wrong type as first name:
         >>> try:
	 ...     say_my_name(1, "Hello")
	 ... except TypeError as e:
	 ...     str(e) == "first_name must be a string"
	 True

Checking for wrong type as last name:
         >>> try:
	 ...     say_my_name("Hello", [4])
	 ... except TypeError as e:
	 ...     str(e) == "last_name must be a string"
	 True

Checking for normal use:
	 >>> result = say_my_name("Hello", "World")
	 >>> expected_result = "My name is Hello World"
	 >>> result == expected_result
	 True

	 >>> result = say_my_name("You know nothing", "John Snow")
	 >>> expected_result = "My name is You know nothing John Snow"
	 >>> result == expected_result
	 True

Checking for 1 arg:
	 >>> result = say_my_name("Hello")
	 >>> expected_result = "My name is Hello"
	 >>> result == expected_result
	 True

Checking for more than 2 args:
	 >>> try:
	 ...     say_my_name("Hello", "World", "hi")
	 ... except TypeError as e:
	 ...     str(e) == "say_my_name() takes from 1 to 2 positional arguments but 3 were given"
	 True

